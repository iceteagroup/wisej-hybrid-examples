name: screenshot

on:
  workflow_dispatch:
    inputs:
      SimulatorName:
        description: "The simulator name."
        default: "com.apple.CoreSimulator.SimDeviceType.iPhone-15"
        required: true
        type: string
      SimulatorOS:
        description: "The simulator OS version."
        default: "iOS-17-2"
        required: true
        type: string

jobs:
  build-and-run:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET 8.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Install Certificates
        run: |
          # Install Provisioning Profiles
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp Credentials/iOS/VS_compoetpbportal_Development.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles
        
          # create temporary keychain
          security create-keychain -p "" $RUNNER_TEMP/app-signing.keychain-db
          security set-keychain-settings -lut 21600 $RUNNER_TEMP/app-signing.keychain-db
          security unlock-keychain -p "" $RUNNER_TEMP/app-signing.keychain-db
  
          # import p12 development cert.
          security import Credentials/iOS/ITG-DEV.p12 -P "" -A -t cert -f pkcs12 -k $RUNNER_TEMP/app-signing.keychain-db
          security set-key-partition-list -S apple-tool:,apple: -k "" $RUNNER_TEMP/app-signing.keychain-db
          security list-keychain -d user -s $RUNNER_TEMP/app-signing.keychain-db
  
          echo "Certificate successfully installed and imported."

      - name: Set Xcode 16.0 as default
        run: sudo xcode-select -s /Applications/Xcode_16.app

      - name: Install Homebrew dependencies
        run: |
          brew update
          brew tap facebook/fb 
          brew install idb-companion
      - name: Create Python virtual environment and install idb
        run: |
          python3 -m venv idb_venv
          source idb_venv/bin/activate
          python3 -m pip install fb-idb
      - name: Restore workloads
        run: dotnet workload restore PoetPB.Client/PoetPB.Client.csproj

      - name: Build, run, and capture screenshot
        run: |
            SIMULATOR_NAME="${{ github.event.inputs.SimulatorName }}"
            SIMULATOR_OS="${{ github.event.inputs.SimulatorOS }}"
            
            source idb_venv/bin/activate
      
            echo "Processing Device Type: $SIMULATOR_NAME, OS Version: $SIMULATOR_OS"
          
            # Fetch the correct UDID based on the device type and iOS version
            SIMULATOR_ID=$(xcrun simctl list --json devices available | jq -r \
              ".devices | to_entries[] | select(.key | contains(\"$SIMULATOR_OS\")) | \
              .value[] | select(.deviceTypeIdentifier == \"$SIMULATOR_NAME\" and .isAvailable == true) | .udid")
          
            if [ -z "$SIMULATOR_ID" ]; then
              echo "No available simulator found for $SIMULATOR_NAME running $SIMULATOR_OS. Skipping."
              exit 1
            fi
          
            echo "Found Simulator ID: $SIMULATOR_ID for $SIMULATOR_NAME running $SIMULATOR_OS"
          
            # Run the build and run process in the background
            nohup dotnet build PoetPB.Client/PoetPB.Client.csproj -t:Run -f net8.0-ios -p:_DeviceName=:v2:udid=$SIMULATOR_ID > nohup.out 2>&1 &
          
            # Wait until nohup.out exists before tailing
            while [ ! -f nohup.out ]; do
              sleep 1
            done
          
            # Monitor the nohup log for the launch command or failure
            TIMEOUT=300  # 5 minutes (300 seconds)
            INTERVAL=5   # Check interval (5 seconds)
            ELAPSED=0    # Time elapsed
          
            tail -f nohup.out &
            TAIL_PID=$!
          
            while [ $ELAPSED -lt $TIMEOUT ]; do
              # Check for success condition
              if grep -q "xcrun simctl launch --console" nohup.out; then
                echo "xcrun simctl launch command found"
                break
              fi
          
              # Check for build failure condition
              if grep -q "error" nohup.out || grep -q "fail" nohup.out; then
                echo "Dotnet build failed. Exiting."
                exit 1
              fi
          
              sleep $INTERVAL
              ELAPSED=$((ELAPSED + INTERVAL))
            done
          
            if [ $ELAPSED -ge $TIMEOUT ]; then
              echo "Timed out waiting for xcrun simctl launch command for $SIMULATOR_ID."
              exit 1
            fi
      
            # Delay to allow simulator to boot app.
            sleep 5
          
            # Take a screenshot
            SCREENSHOT_PATH="/tmp/screenshot_${SIMULATOR_ID}.png"
            idb screenshot $SCREENSHOT_PATH --udid $SIMULATOR_ID
            echo "SCREENSHOT_PATH=$SCREENSHOT_PATH" >> $GITHUB_ENV
      
            idb disconnect $SIMULATOR_ID
            xcrun simctl shutdown $SIMULATOR_ID
          
            # Upload screenshot as artifact using actions/upload-artifact
            echo "Uploading screenshot for Simulator ID: $SIMULATOR_ID"
            mv $SCREENSHOT_PATH ./screenshot_${SIMULATOR_ID}.png
                
            # Prepare an artifact path for uploading multiple screenshots
            echo "::set-output name=screenshot_path::./screenshot_${SIMULATOR_ID}.png"

      - name: Upload screenshots as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ios-screenshots
          path: ./screenshot_*.png

      - name: Upload nohup log as artifact
        uses: actions/upload-artifact@v3
        with:
          name: nohup-log
          path: nohup.out

name: build

on:
  workflow_dispatch:
    inputs:
      Branch:
        description: 'Branch to use'
        required: false
        default: 'main'
      ApplicationDisplayVersion:
        description: 'Application display version'
        required: false
      ApplicationVersion:
        description: 'Application version'
        required: false

jobs:
  build:
    runs-on: macos-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.Branch || 'main' }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x' # Using .NET 8

    - name: Install the P12 Certificates
      run: |
        # Install Provisioning Profiles
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp Credentials/iOS/PoetDistributionProfile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles
      
        # create temporary keychain
        security create-keychain -p "" $RUNNER_TEMP/app-signing.keychain-db
        security set-keychain-settings -lut 21600 $RUNNER_TEMP/app-signing.keychain-db
        security unlock-keychain -p "" $RUNNER_TEMP/app-signing.keychain-db

        # import p12 distribution cert.
        security import Credentials/iOS/ITG-DIST.p12 -P "ITG-DIST2024" -A -t cert -f pkcs12 -k $RUNNER_TEMP/app-signing.keychain-db
        security set-key-partition-list -S apple-tool:,apple: -k "" $RUNNER_TEMP/app-signing.keychain-db
        security list-keychain -d user -s $RUNNER_TEMP/app-signing.keychain-db

        echo "Certificate successfully installed and imported."

        echo "Checking if certificate is ready to use..."
        if security find-identity -p codesigning -v | grep -q "Apple Distribution: ICE TEA GROUP LLC"; then
          echo "Apple Distribution certificate is ready for use."
        else
          echo "Apple Distribution certificate not found or not ready for use." >&2
          exit 1
        fi

    - name: Set Xcode 16.0 as default
      run: sudo xcode-select -s /Applications/Xcode_16.app

    - name: Verify Xcode Version
      run: xcodebuild -version
      
    - name: Restore dependencies
      run: dotnet workload restore PoetPB.Client/PoetPB.Client.csproj

    - name: Copy keystore.jks to project directory
      run: |
        cp Credentials/Android/Keystore.jks PoetPB.Client/Keystore.jks

    - name: Publish Android project
      run: |
        dotnet publish PoetPB.Client \
          -c Release \
          -f net8.0-android \
          -p:AndroidKeyStore=true \
          -p:AndroidSigningKeyAlias=key0 \
          -p:AndroidSigningKeyPass=20P03T!21 \
          -p:AndroidSigningStorePass=20P03T!21 \
          -p:AndroidSigningKeyStore=Keystore.jks \
          -p:ApplicationDisplayVersion="${{ github.event.inputs.ApplicationDisplayVersion || '' }}" \
          -p:ApplicationVersion="${{ github.event.inputs.ApplicationVersion || '' }}" \
          --output ./publish/android

    - name: Find and upload Android AAB
      uses: actions/upload-artifact@v3
      with:
        name: ${{ github.event.inputs.ApplicationDisplayVersion && github.event.inputs.ApplicationVersion && format('{0}.{1}-android-aab', github.event.inputs.ApplicationDisplayVersion, github.event.inputs.ApplicationVersion) || 'android-aab' }}
        path: ./publish/android/**/*.aab

    - name: Find and upload Android APK
      uses: actions/upload-artifact@v3
      with:
        name: ${{ github.event.inputs.ApplicationDisplayVersion && github.event.inputs.ApplicationVersion && format('{0}.{1}-android-apk', github.event.inputs.ApplicationDisplayVersion, github.event.inputs.ApplicationVersion) || 'android-apk' }}
        path: ./publish/android/**/*.apk

    - name: Update aps-environment to production
      run: |
        /usr/libexec/PlistBuddy -c "Set :aps-environment production" PoetPB.Client/Platforms/iOS/Entitlements.plist

    - name: Publish iOS project
      run: |
        dotnet publish PoetPB.Client \
          -f:net8.0-ios \
          -c:Release \
          -p:CodesignKey="Apple Distribution: ICE TEA GROUP LLC (C5KB4U3BM9)" \
          -p:CodesignProvision="PoetDistributionProfile" \
          -p:ApplicationDisplayVersion="${{ github.event.inputs.ApplicationDisplayVersion || '' }}" \
          -p:ApplicationVersion="${{ github.event.inputs.ApplicationVersion || '' }}" \
          -p:Optimize=false \
          -p:TrimUnusedDependencies=false \
          -p:MTouchLink=SdkOnly \
          -p:ArchiveOnBuild=true \
          --output ./publish/ios

    - name: Copy generated .xcarchive files
      run: |
        mkdir -p ./publish/ios/xcarchive
        cp -r ~/Library/Developer/Xcode/Archives/$(date +'%Y-%m-%d')/*.xcarchive ./publish/ios/xcarchive/

    - name: Find and upload iOS Distribution IPA
      uses: actions/upload-artifact@v3
      with:
        name: ${{ github.event.inputs.ApplicationDisplayVersion && github.event.inputs.ApplicationVersion && format('{0}.{1}-ios-ipa', github.event.inputs.ApplicationDisplayVersion, github.event.inputs.ApplicationVersion) || 'ios-ipa' }}
        path: ./publish/ios/**/*.ipa

    - name: Find and upload iOS Archive (.xcarchive)
      uses: actions/upload-artifact@v3
      with:
        name: ${{ github.event.inputs.ApplicationDisplayVersion && github.event.inputs.ApplicationVersion && format('{0}.{1}-ios-xcarchive', github.event.inputs.ApplicationDisplayVersion, github.event.inputs.ApplicationVersion) || 'ios-xcarchive' }}
        path: ./publish/ios/xcarchive/*.xcarchive
